import csv
import sys

class DMA():
   def __init__(self, source, dest, length):
      self.source = source
      self.dest = dest
      self.length = length
      self.is_asm = False

class ROM():
   def __init__(self, rom_id, regions, description, cksum1, cksum2):
      self.rom_id = rom_id
      self.regions = regions
      self.description = description
      self.cksum1 = cksum1
      self.cksum2 = cksum2

rom = ROM("rom", "", "noname", 0x0, 0x0)
dmas = []
jals = []

if len(sys.argv) < 2:
   print("Usage: dma2config.py <INPUT>")

with open(sys.argv[1], 'rb') as csvfile:
   spamreader = csv.reader(csvfile, delimiter=',')
   for row in spamreader:
      if row[0] == 'ROM':
         rom = ROM(row[1], row[2], row[3], int(row[4], 16), int(row[5], 16))
      elif row[0] == 'DMA':
         source = int(row[1], 16)
         if not any(x.source == source for x in dmas):
            dmas.append(DMA(source, int(row[2], 16), int(row[3], 16)))
      elif row[0] == 'JAL' or row[0] == 'JALR':
         jals.append(int(row[1], 16))

# sort arrays
dmas.sort(key=lambda x: x.dest)
dmas_rom = sorted(dmas, key=lambda x: x.source)
jals.sort()

for jal in jals:
   for dma in dmas:
      jal_masked = jal & 0x0FFFFFFF
      if jal_masked >= dma.dest and jal_masked < (dma.dest + dma.length):
         dma.is_asm = True

print("// n64split configuration file")
print("// generated by dma2config")
print("name = \"%s\";" % rom.description)
print("")

print("// checksums from ROM header offsets 0x10 and 0x14")
print("// used for auto configuration detection")
print("checksum1 = 0x%08X;" % rom.cksum1)
print("checksum2 = 0x%08X;" % rom.cksum2)
print("")

print("// base filename used for outputs (please, no spaces)")
print("basename = \"%s\";" % rom.rom_id)
print("")

print("// memory map from KSEG0 RAM addresses to ROM offsets")
print("// these were decoded from DMA accesses")
print("memory =")
print("(")
print("   // start     end         ram-to-rom")
for dma in dmas:
   if dma.is_asm:
      start = 0x80000000 + dma.dest
      print("   (0x%08X, 0x%08X, 0x%08X),  // %06X-%06X %06X" % (start, start + dma.length, start - dma.source, dma.source, dma.source + dma.length, dma.length))

print(");")
print("")
print("// ranges to split the ROM into")
print("// types:")
print("//   asm      - MIPS assembly block.  Symbol names are in 'labels' list below")
print("//   behavior - behavior script")
print("//   bin      - raw binary, usually data")
print("//   header   - ROM header block")
print("//   instrset - instrument set")
print("//   level    - level commands")
print("//   m64      - M64 music sequence bank")
print("//   mio0     - MIO0 compressed data block.  may have texture breakdown")
print("//   ptr      - RAM address or ROM offset pointer")
print("//")
print("//   textures types:")
print("//      rgba   - 16-bit RGBA (5-5-5-1)")
print("//      ia     - 16/8/4/1-bit greyscale")
print("//      skybox - grid of 32x32 16-bit RGBA")
print("ranges =")
print("(")
print("   // start,  end,      type,     label")
for dma in dmas_rom:
   if dma.is_asm:
      print("   (0x%06X, 0x%06X, \"asm\")," % (dma.source, dma.source + dma.length))
print(");")
print("")

print("// Labels for functions or data memory addresses")
print("// All label addresses are RAM addresses")
print("// Order does not matter")
print("labels =")
print("(")
for jal in jals:
   print("   (0x%08X, \"proc_%08X\")," % (jal, jal))
print(");")
print("")
