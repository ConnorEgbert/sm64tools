// ROM splitter configuration file
name = "Mario Kart 64 (U)";

// base filename used for outputs (please, no spaces)
basename = "mk64.u";

// memory map from KSEG0 RAM addresses to ROM offsets
// these were decoded from DMA accesses
// 8028DF00-802BA100 were copied in FF chunks for some reason
memory =
(
   // start     end         ram-to-rom
   // (0x80000400, 0x80100400, 0x7FFFF400), // 001000-100FFF 100000
   (0x80000400, 0x800F690F, 0x7FFFF400), // 001000-0F750F 0F650F
   (0x8028DF00, 0x802BA0FF, 0x801969F0)  // 0F7510-12361F 02C1FF
);

// ranges to split the ROM into
// types:
//   asm      - MIPS assembly block.  Symbol names are in 'labels' list below
//   behavior - behavior script
//   bin      - raw binary, usually data
//   header   - ROM header block
//   level    - level commands
//   mio0     - MIO0 compressed data block.  may have texture breakdown
//   ptr      - RAM address or ROM offset pointer
//
//   textures types:
//      rgba   - 16-bit RGBA (5-5-5-1)
//      ia     - 16/8-bit greyscale
//      skybox - grid of 32x32 16-bit RGBA
ranges =
(
   // start,  end,      type,     label
   (0x000000, 0x000040, "header", "header"),
   (0x000040, 0x001000, "bin",    "boot"),
   (0x001000, 0x0F7510, "asm"),
   (0x0F7510, 0x123610, "asm"), // TODO: not sure if this is all asm
   (0x132B50, 0x145470, "mio0", "some_textures", (
      //offset, type, depth,width,height
      (0x00200, "rgba", 16,  32, 64),
      (0x01EE8, "rgba", 16,  32, 64),
      (0x03348, "rgba", 16,  32, 32),
      (0x03B48, "rgba", 16,  64, 32),
      (0x06AD8, "ia",    8,  32, 32),
      (0x09958, "ia",    8,  32, 96),
      (0x0A958, "rgba", 16,  32,  8),
      (0x0AB58, "rgba", 16,  32,  8),
      (0x0AD58, "rgba", 16,  32, 16),
      (0x0B158, "rgba", 16,  32, 16),
      (0x0B558, "rgba", 16,  32, 16),
      (0x0B958, "rgba", 16,  32, 16),
      (0x0BD58, "rgba", 16,  32, 16),
      (0x0C158, "rgba", 16,  32, 16),
      (0x0C558, "rgba", 16, 104, 16),
      (0x0D258, "ia",    8,  64, 64),
      (0x0E258, "ia",    8,  64, 64),
      (0x0F258, "ia",    8,  64, 64),
      (0x10258, "ia",    8,  64, 64),
      (0x11258, "ia",    8,  64, 64),
      (0x12258, "ia",    8,  64, 64),
      (0x13258, "ia",    8,  64, 64),
      (0x14258, "ia",    8,  64, 64),
      (0x15258, "ia",    4,  64, 64),
      (0x15A58, "ia",    4,  64, 64),
      (0x16258, "ia",    4,  64, 64),
      (0x16A58, "ia",    4,  64, 64))
   ),
   // Yet to be decoded - include as binary
   (0x145470, 0xC00000, "bin")
);

// Labels for functions or data memory addresses
// All label addresses are RAM addresses
// Order does not matter
labels =
(
   (0x80000400, "EntryPoint"),
   (0x80000450, "CreateThread"),
   (0x80000484, "Main"),
   (0x800004E0, "Thread1_Idle"),
   (0x800023E4, "Thread3_Main"),
   //(0x8000277C, "Thread5_Debug"), TODO: this causes n64split to run away
   (0x800028E4, "Thread4"),
   (0x800400D0, "mio0decode"),
   (0x800404C0, "mio0encode"),
   (0x80099124, "SegmentedToVirtualDupe"),
   (0x80099154, "SegmentedToVirtual"),
   (0x800CBF70, "osCreateThread"),
   (0x800CC0C0, "osInitialize"),
   (0x800CC360, "osStartThread"),
   (0x800CC4B0, "osCreateViManager"),
   (0x800CC850, "osViSetMode"),
   (0x800CC8C0, "osViBlack"),
   (0x800CC930, "osViSetSpecialFeatures"),
   (0x800CCAF0, "osCreatePiManager"),
   (0x800CCC80, "osSetThreadPri"),
   (0x800CCD60, "osCreateMesgQueue"),
   (0x800CD750, "osRecvMesg"),
   (0x800CDA60, "bzero"),
   (0x800CDB00, "osInvalCache"),
   (0x800CDED8, "__ull_div"),
   (0x800CDFD8, "__ll_mul"),
   (0x800D11B0, "__osExceptionPreamble"),
   (0x800D1AB0, "__osDisableInt"),
   (0x800D1AD0, "__osRestoreInt"),
   (0x800D1B40, "__osGetSR"),
   (0x800D1B50, "__osSetFpcCsr"),
   (0x800D1B60, "__osSiRawReadIo"),
   (0x800D1BB0, "__osSiRawWriteIo"),
   (0x800D1C00, "osWriteBackDCache"),
   (0x800D1CE0, "osEPiRawReadIo"),
   (0x800D2A30, "__osViInit"),
   (0x802A7B94, "SetSegmentBase")
);

